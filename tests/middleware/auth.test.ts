import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { Request, Response, NextFunction } from 'express';\nimport { authenticateApiKey, authenticateAdmin, generateAdminToken } from '../../src/middleware/auth';\nimport { db } from '../../src/db';\nimport jwt from 'jsonwebtoken';\n\n// Mock the database\njest.mock('../../src/db', () => ({\n  db: {\n    select: jest.fn(),\n  },\n}));\n\n// Mock jsonwebtoken\njest.mock('jsonwebtoken');\n\nconst mockDb = db as jest.Mocked<typeof db>;\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\n\ndescribe('Auth Middleware', () => {\n  let mockReq: Partial<Request>;\n  let mockRes: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    mockReq = {\n      headers: {},\n    };\n\n    mockRes = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n    };\n\n    mockNext = jest.fn();\n\n    jest.clearAllMocks();\n  });\n\n  describe('authenticateApiKey', () => {\n    it('should authenticate valid API key', async () => {\n      const mockApiKey = {\n        id: 1,\n        key: 'pk-test-key',\n        name: 'Test Key',\n        active: true,\n      };\n\n      mockReq.headers!.authorization = 'Bearer pk-test-key';\n      \n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockApiKey]),\n          }),\n        }),\n      } as any);\n\n      await authenticateApiKey(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockReq.apiKey).toEqual(mockApiKey);\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockRes.status).not.toHaveBeenCalled();\n    });\n\n    it('should reject missing authorization header', async () => {\n      await authenticateApiKey(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(401);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Missing or invalid authorization header',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should reject invalid authorization format', async () => {\n      mockReq.headers!.authorization = 'InvalidFormat pk-test-key';\n\n      await authenticateApiKey(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(401);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Missing or invalid authorization header',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should reject invalid API key', async () => {\n      mockReq.headers!.authorization = 'Bearer invalid-key';\n      \n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      } as any);\n\n      await authenticateApiKey(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(401);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Invalid or inactive API key',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should reject inactive API key', async () => {\n      const mockApiKey = {\n        id: 1,\n        key: 'pk-test-key',\n        name: 'Test Key',\n        active: false,\n      };\n\n      mockReq.headers!.authorization = 'Bearer pk-test-key';\n      \n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockApiKey]),\n          }),\n        }),\n      } as any);\n\n      await authenticateApiKey(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(401);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Invalid or inactive API key',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should handle database errors', async () => {\n      mockReq.headers!.authorization = 'Bearer pk-test-key';\n      \n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockRejectedValue(new Error('Database error')),\n          }),\n        }),\n      } as any);\n\n      await authenticateApiKey(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(500);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Authentication error',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('authenticateAdmin', () => {\n    it('should authenticate valid admin token', () => {\n      mockReq.headers!.authorization = 'Bearer valid-token';\n      mockJwt.verify.mockReturnValue({ admin: true } as any);\n\n      authenticateAdmin(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockReq.isAdmin).toBe(true);\n      expect(mockNext).toHaveBeenCalled();\n      expect(mockRes.status).not.toHaveBeenCalled();\n    });\n\n    it('should reject missing authorization header', () => {\n      authenticateAdmin(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(401);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Missing or invalid authorization header',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    it('should reject invalid token', () => {\n      mockReq.headers!.authorization = 'Bearer invalid-token';\n      mockJwt.verify.mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      authenticateAdmin(mockReq as any, mockRes as any, mockNext);\n\n      expect(mockRes.status).toHaveBeenCalledWith(401);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        error: 'Invalid admin token',\n      });\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('generateAdminToken', () => {\n    it('should generate a valid JWT token', () => {\n      mockJwt.sign.mockReturnValue('generated-token');\n\n      const token = generateAdminToken();\n\n      expect(token).toBe('generated-token');\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n        { admin: true },\n        expect.any(String),\n        { expiresIn: '24h' }\n      );\n    });\n  });\n});"